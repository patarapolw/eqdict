{"version":3,"sources":["src/index.ts","browser.ts"],"names":[],"mappings":";AA0DC,aA1DD,SAAwB,EAAQ,GAQvB,IAkDR,IAAA,EAAA,EAzDK,EAAI,GACJ,EAAI,GAEF,EAEF,GAEG,EAAE,OAAS,GAGZ,GAFH,GAAD,EAAA,EAAA,IAAC,GAAG,EAAA,EAAA,GAEA,EAAG,CACD,GAAA,OAAO,KAAK,GAAQ,SAAS,GACzB,MAAA,IAAI,MAAM,oBAAoB,GAGzB,MAAT,EAAE,IACH,GAAD,EAAA,EAAA,IAAC,GAAG,EAAA,EAAA,GACJ,EAAO,GAAK,GAEZ,EAAO,GAAK,GAGd,EAAI,GAID,OAAA,EAGT,SAAS,EAAe,GAGlB,GAFJ,EAAI,EAAE,QAAQ,YAAa,IAIpB,CACD,GAAS,MAAT,EAAE,IAAuB,MAAT,EAAE,GAAY,CAC5B,IAAA,EAAY,EAAE,OASX,OARP,EAAE,MAAM,IAAI,QAAQ,SAAC,EAAG,GAClB,EAAI,GACF,IAAM,EAAE,IAA6B,OAAvB,EAAE,OAAO,EAAI,EAAG,IAAe,IAAc,EAAE,SAC/D,EAAY,KAKX,CAAC,EAAE,OAAO,EAAG,EAAY,GAAI,EAAE,OAAO,EAAY,IAErD,IAAA,EAAY,EAAE,OAOX,OANP,EAAE,MAAM,IAAI,QAAQ,SAAC,EAAG,GAClB,SAAS,KAAK,IAAM,IAAc,EAAE,SACtC,EAAY,KAIT,CAAC,EAAE,OAAO,EAAG,GAAY,EAAE,OAAO,IArBpC,MAAA,CAAC,GAAI,IAwBf,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA1DD,QAAA,QAAA;;ACCA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IADA,IAAA,EAAA,EAAA,QAAA,UACA,OAAO,OAAO,OAAQ,CAAE,OAAM,EAAA","file":"index.min.js","sourceRoot":"..","sourcesContent":["export default function eqdict (s: string) {\n  let k = ''\n  let v = ''\n\n  const output: {\n    [key: string]: string\n  } = {}\n\n  while (s.length > 0) {\n    [k, s] = eqdictConsume(s)\n\n    if (k) {\n      if (Object.keys(output).includes(k)) {\n        throw new Error(`Duplicated keys: ${k}`)\n      }\n\n      if (s[0] === '=') {\n        [v, s] = eqdictConsume(s)\n        output[k] = v\n      } else {\n        output[k] = ''\n      }\n\n      k = ''\n    }\n  }\n\n  return output\n}\n\nfunction eqdictConsume (s: string) {\n  s = s.replace(/^[ =,\\s]+/, '')\n\n  if (!s) {\n    return ['', '']\n  } else {\n    if (s[0] === '\"' || s[0] === \"'\") {\n      let iSplitter = s.length\n      s.split('').forEach((c, i) => {\n        if (i > 0) {\n          if (c === s[0] && s.substr(i - 1, 1) !== '\\\\' && iSplitter === s.length) {\n            iSplitter = i\n          }\n        }\n      })\n\n      return [s.substr(1, iSplitter - 1), s.substr(iSplitter + 1)]\n    } else {\n      let iSplitter = s.length\n      s.split('').forEach((c, i) => {\n        if (/[=,\\s]/.test(c) && iSplitter === s.length) {\n          iSplitter = i\n        }\n      })\n\n      return [s.substr(0, iSplitter), s.substr(iSplitter)]\n    }\n  }\n}\n","import eqdict from './src'\nObject.assign(window, { eqdict })\n"]}